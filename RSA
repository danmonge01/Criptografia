import secrets
import hashlib

# Listas

listaPrimos = []
listae = []


def verificarPrimo(n):
    c = 0
    x = 2
    if n >= 2:
        while x <= n / 2:
            if n % x == 0:
                c += 1
                x += 1
            else:
                x += 1
        if c == 0:
            return True
        else:
            return False
    else:
        return False


# n = cantidad de primos a generar
def generarPrimos(n):
    x = 2
    while n != 0:
        if verificarPrimo(x):
            listaPrimos.append(x)
            x += 1
            n = n - 1
        else:
            x += 1
    return listaPrimos


def mcd(e, ø):
    m = ø % e
    while m != 0:
        ø = e
        e = m
        m = ø % e
    return e


def generarPQ(primos):
    return secrets.choice(primos)


def generarE(le):
    return secrets.choice(le)


def obtenerPQ(opcion):
    lista_primos = generarPrimos(50)

    if opcion == 1:
        print("\nªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª")
        p = generarPQ(listaPrimos)
        q = generarPQ(listaPrimos)
        while p == q:
            p = generarPQ(listaPrimos)

        listaPQ = [p, q]
    elif opcion == 2:
        print("\nªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª")
        print("\nLISTA DE NUMEROS PRIMOS =" + str(lista_primos) + "\n")
        print("ªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª")
        p = int(input("\tValor de (p)="))
        while not verificarPrimo(p):
            print("\t(p) El número tiene que ser primo")
            p = int(input("\tValor de (p)="))

        q = int(input("\tValor de (q)="))
        while verificarPrimo(q) == False or q == p:
            print("\t(q) Ingrese un número que se encuntre en la lista o bien que sea distinto de (p)")
            q = int(input("\tValor de (q)="))

        listaPQ = [p, q]

    return listaPQ


def obtenerN(p, q):
    n = p * q
    return n


def obtenerø(p, q):
    ø = (p - 1) * (q - 1)
    return ø


def obtenerE(ø, opcion):
    print("\nªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª")
    # e tiene que ser mayor a 2 porque recordemos que los primos no puede ser 1, y por supuesto 0 o negativos
    e = 2
    while 1 < e < ø:
        if mcd(e, ø) == 1:
            listae.append(e)
            e += 1
        else:
            e += 1

    if opcion == 1:
        e = generarE(listae)
    elif opcion == 2:
        print("\nPosibles valores (e)=" + str(listae))
        print("ªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª")
        e = int(input("\n\tValor de (e)="))

    return e


def obtenerD(e, ø):
    k = 1
    m = (1 + k * ø) % e
    while m != 0:
        k += 1
        m = (1 + k * ø) % e

    d = int((1 + k * ø) / e)
    return d


def mostrarDatos(p, q, n, ø, e, d):
    print("\nªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª",
          "\nLos números primos son",
          "\nP(x) = ", p,
          "\nQ(x) = ", q)
    print("ªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª",
          "\nn es igual a",
          "\nn = ", n)
    print("ªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª",
          "\nø es igual a",
          "\nø = ", ø)
    print("ªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª",
          "\ne es igual a",
          "\ne = ", e)
    print("ªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª",
          "\nd es igual a",
          "\nd = ", d)
    print("ªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª",
          "\nLas llaves son",
          "\nPublica = ", [n, e],
          "\nPrivada = ", [n, d])


def buscarposicion(x):
    alf = r"ABCDEFGHIJKLMNÑOPQRSTUVWXYZ1234567890abcdefghijklmnñopqrstuvwxyz,.@#~%&/()=¿?'¡!ª\º*-+=`[]{}Ç¨^<>"
    c = 0
    for i in alf:
        if x == i:
            return c
        else:
            c += 1


def buscarposicionInversa(x):
    alf = r"ABCDEFGHIJKLMNÑOPQRSTUVWXYZ1234567890abcdefghijklmnñopqrstuvwxyz,.@#~%&/()=¿?'¡!ª\º*-+=`[]{}Ç¨^<>"
    c = 0
    for i in alf:
        if x == c:
            return i
        else:
            c += 1


def cifrarpalabra(password, k):
    lpc = []
    lp = []
    n, e = k
    cpc = ""
    for i in password:
        x = buscarposicion(i)
        lp.append(x)
    for j in lp:
        c = (j ** e) % n
        lpc.append(c)
    for k in lpc:
        cpc = cpc + str(k) + " "
    return cpc


def cifrarPassword(password, llavePublica):
    lm = password.split(" ")
    cmc = ""
    lmc = []
    for i in lm:
        pal = cifrarpalabra(i, llavePublica)
        lmc.append(pal)
    for j in lmc:
        cmc = cmc + str(j) + " "
    return cmc


def strBin(password):
    conversionBinario = ' '.join(format(ord(c), 'b') for c in password)
    print("Binario:", conversionBinario)


def descifrarPassword(password, llavePrivada):
    lm = password.split("  ")
    cmc = ""
    lmc = []
    for i in lm:
        pal = descifrarnumero(i, llavePrivada)
        lmc.append(pal)
    for j in lmc:
        cmc = cmc + str(j) + " "
    return cmc


def descifrarnumero(m, k):
    lnc = []
    ln = []
    n, d = k
    cnc = ""
    men = m.split(" ")
    for i in men:
        x = int(i)
        ln.append(x)
    for j in ln:
        m = (j ** d) % n
        lnc.append(m)
    for k in lnc:
        l = buscarposicionInversa(k)
        cnc = cnc + str(l)
    return cnc


def menu():
    print("ªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª",
          "\n (1) = Encriptar automaticamente",
          "\n (2) = Encriptar manualmente",
          "\n (3) = Hash"
          "\n (4) = Desencriptar",
          "\n (0) = Salir")


def hashing(h):
    digest = h.hexdigest()
    return digest


while True:
    menu()
    opcion = int(input("\n\t¿Qué desea hacer?: "))

    if opcion == 0:
        exit(0)
    elif opcion == 1 or opcion == 2:
        p, q = obtenerPQ(opcion)
        n = obtenerN(p, q)
        ø = obtenerø(p, q)
        e = obtenerE(ø, opcion)
        d = obtenerD(e, ø)

        llavePublica = [n, e]
        llavePrivada = [n, d]

        mostrarDatos(p, q, n, ø, e, d)

        print("\nªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª")
        password = input("Ingrese la contraseña: ")
        print("ªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª")
        strBin(password)
        print("ªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª")

        passwordCifrada = cifrarPassword(password, llavePublica)

        print("\tContraseña cifrada: ", str(passwordCifrada))
        print("ªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª")

        input("Enter para continuar")
    elif opcion == 3:
        bdatos = bytes(passwordCifrada, 'utf-8')
        h = hashlib.sha256(bdatos)
        passwordHash = hashing(h)
        print("\nªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª")
        print("HASH: ", passwordHash)
        print("ªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª")
    elif opcion == 4:
        mensaje = input("Ingrese la contraseña cifrada:")
        passwordDecifrada = descifrarPassword(mensaje, llavePrivada)
        print("\nªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª")
        print("\tContraseña decifrada: ", str(passwordDecifrada))
        print("ªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª")
    elif opcion != range(0, 4):
        print("Valor invalido, por favor digitelo de nuevo")
